# -*- coding: utf-8 -*-
"""Soil based crop prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E1ly4sMkt-eor5MZwOde3gkdOyT20byu
"""

import numpy as np
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dropout
from tensorflow.keras.layers import Dense, Activation, Flatten
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.models import load_model

# Extract zip file
import zipfile

zip_ref = zipfile.ZipFile("/content/archive_2.zip", 'r')
zip_ref.extractall()
zip_ref.close()

# Load Dataset

Data_dir = "/content/Dataset/Train"

# Count images in each class folder

class_counts = {}
for folder_name in os.listdir(Data_dir):
    folder_path = os.path.join(Data_dir, folder_name)
    if os.path.isdir(folder_path):
        class_counts[folder_name] = len(os.listdir(folder_path))

print(class_counts)

import cv2
import os
from google.colab.patches import cv2_imshow

# View Alluvial Soil Images
folder_path = "/content/Dataset/Train/Alluvial soil"
images = os.listdir(folder_path)

for img_name in images[1:3]:
    img_path = os.path.join(folder_path, img_name)
    img = cv2.imread(img_path)
    img = cv2.resize(img, (224, 224))
    cv2_imshow(img) # Use cv2_imshow instead of cv2.imshow

# View Black Soil Images
folder_path = "/content/Dataset/Train/Black Soil"
images = os.listdir(folder_path)

for img_name in images[1:3]:
    img_path = os.path.join(folder_path, img_name)
    img = cv2.imread(img_path)
    img = cv2.resize(img, (224, 224))
    cv2_imshow(img)

# View Clay Soil Images
folder_path = "/content/Dataset/Train/Clay soil"
images = os.listdir(folder_path)

for img_name in images[1:3]:
    img_path = os.path.join(folder_path, img_name)
    img = cv2.imread(img_path)
    img = cv2.resize(img, (224, 224))
    cv2_imshow(img)

# View Red Soil Images
folder_path = "/content/Dataset/Train/Red soil"
images = os.listdir(folder_path)

for img_name in images[1:3]:
    img_path = os.path.join(folder_path, img_name)
    img = cv2.imread(img_path)
    img = cv2.resize(img, (224, 224))
    cv2_imshow(img)

# Data Generator

datagen = ImageDataGenerator(ImageDataGenerator(rescale=1./255), validation_split = 0.2)

train_gen = datagen.flow_from_directory(
    Data_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode='categorical',
    subset='training')

# Train data classes

train_gen.class_indices

val_gen = datagen.flow_from_directory(
    Data_dir,
    target_size=(224,224),
    batch_size=32,
    class_mode='categorical',
    subset='validation')

# Model Creation

model = Sequential([
    Conv2D(32, (3,3), activation = 'relu', input_shape = (224,224,3)),
    MaxPooling2D(2,2),
    Conv2D(64, (3,3), activation = 'relu'),
    MaxPooling2D(2,2),
    Flatten(),

    Dense(128, activation = 'relu'),
    Dropout(0.3),
    Dense(4, activation = 'softmax')
])

# Model Compile
model.compile(optimizer='Adam', loss='categorical_crossentropy', metrics=['accuracy'])

model.summary()

# Train model
model.fit(train_gen, epochs=10, validation_data=val_gen)

# Class labels (adjust as per your training)
class_names = ["Alluvial soil", "Black soil", "Clay soil", "Red soil"]

# Create a predict function
def predict(image_path):

    img = cv2.imread(image_path)
    img = cv2.resize(img, (224, 224))
    cv2_imshow(img)
    img = np.expand_dims(img, axis=0)

    pred = np.argmax(model.predict(img))
    print(class_names[pred])

predict('/content/alluvial soil.png')

# Save the model
model.save("Soil Classifier.h5")
print("Model saved")